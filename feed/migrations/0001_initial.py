# Generated by Django 5.2.6 on 2025-09-29 01:59

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('universities', '0002_remove_university_allow_cross_university_collaboration_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FeedConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_university_posts', models.BooleanField(default=True, help_text='Show posts from same university')),
                ('show_public_posts', models.BooleanField(default=True, help_text='Show public posts from other universities')),
                ('show_project_updates', models.BooleanField(default=True, help_text='Show project updates and launches')),
                ('preferred_post_types', models.JSONField(blank=True, default=list, help_text="Preferred types of posts (e.g., ['startup', 'research'])")),
                ('recency_weight', models.FloatField(default=0.4, help_text='Weight for how recent content is', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('relevance_weight', models.FloatField(default=0.3, help_text='Weight for content relevance to user', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('engagement_weight', models.FloatField(default=0.2, help_text='Weight for content engagement (likes, comments)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('university_weight', models.FloatField(default=0.1, help_text='Weight for same university content', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('blocked_users', models.ManyToManyField(blank=True, help_text='Users whose content should not appear in feed', related_name='blocked_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(help_text='User this configuration belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='feed_config', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Feed Configuration',
                'verbose_name_plural': 'Feed Configurations',
            },
        ),
        migrations.CreateModel(
            name='FeedCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feed_type', models.CharField(choices=[('home', 'Home Feed'), ('university', 'University Feed'), ('public', 'Public Feed'), ('trending', 'Trending Feed')], help_text='Type of feed cached', max_length=20)),
                ('cached_items', models.JSONField(default=list, help_text='Cached feed item IDs in order')),
                ('last_refresh', models.DateTimeField(auto_now=True, help_text='When this cache was last refreshed')),
                ('expires_at', models.DateTimeField(help_text='When this cache expires')),
                ('user', models.ForeignKey(help_text='User this cache belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='feed_caches', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Feed Cache',
                'verbose_name_plural': 'Feed Caches',
                'indexes': [models.Index(fields=['user', 'feed_type'], name='feed_feedca_user_id_2be707_idx'), models.Index(fields=['expires_at'], name='feed_feedca_expires_c68095_idx')],
                'unique_together': {('user', 'feed_type')},
            },
        ),
        migrations.CreateModel(
            name='FeedItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content_type', models.CharField(choices=[('post', 'Post'), ('project', 'Project'), ('university_announcement', 'University Announcement')], help_text='Type of content', max_length=30)),
                ('content_id', models.UUIDField(help_text='ID of the content object')),
                ('feed_type', models.CharField(choices=[('home', 'Home Feed'), ('university', 'University Feed'), ('public', 'Public Feed'), ('trending', 'Trending Feed')], default='home', help_text='Which feed this item belongs to', max_length=20)),
                ('score', models.FloatField(default=0.0, help_text='Relevance score for this item (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('viewed', models.BooleanField(default=False, help_text='Whether user has viewed this item')),
                ('view_time', models.FloatField(blank=True, help_text='Time spent viewing this item (in seconds)', null=True)),
                ('clicked', models.BooleanField(default=False, help_text='Whether user has clicked this item')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='User whose feed this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='feed_items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Feed Item',
                'verbose_name_plural': 'Feed Items',
                'ordering': ['-score', '-created_at'],
                'indexes': [models.Index(fields=['user', 'feed_type'], name='feed_feedit_user_id_198de6_idx'), models.Index(fields=['score'], name='feed_feedit_score_09c1ce_idx'), models.Index(fields=['content_type', 'content_id'], name='feed_feedit_content_4e3d7f_idx'), models.Index(fields=['created_at'], name='feed_feedit_created_c14b92_idx')],
                'unique_together': {('user', 'content_type', 'content_id', 'feed_type')},
            },
        ),
        migrations.CreateModel(
            name='TrendingTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.CharField(help_text='Trending topic or hashtag', max_length=100, unique=True)),
                ('mention_count', models.PositiveIntegerField(default=0, help_text='Number of mentions in the last 24 hours')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_calculated', models.DateTimeField(default=django.utils.timezone.now, help_text='When trending score was last calculated')),
                ('universities', models.ManyToManyField(blank=True, help_text='Universities where this topic is trending', related_name='trending_topics', to='universities.university')),
            ],
            options={
                'verbose_name': 'Trending Topic',
                'verbose_name_plural': 'Trending Topics',
                'ordering': ['-mention_count', '-updated_at'],
                'indexes': [models.Index(fields=['mention_count'], name='feed_trendi_mention_2e41ee_idx'), models.Index(fields=['last_calculated'], name='feed_trendi_last_ca_0fd239_idx')],
            },
        ),
    ]
